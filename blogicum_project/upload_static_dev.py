import os
import boto3
import mimetypes

from botocore.client import Config  # –ò–º–ø–æ—Ä—Ç Config –∏–∑ botocore
from decouple import config
from pathlib import Path


# üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è S3
AWS_TENANT_ID = config('AWS_TENANT_ID')
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
AWS_S3_ENDPOINT_URL = config('AWS_S3_ENDPOINT_URL')
AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME')
AWS_BUCKET_NAME = config('AWS_S3_SIGNATURE_VERSION')

# üîπ –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ S3 —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ boto3
session = boto3.session.Session()
s3 = session.client(
    "s3",
    aws_access_key_id=f"{AWS_TENANT_ID}:{AWS_ACCESS_KEY_ID}",  # –§–æ—Ä–º–∞—Ç tenant_id:key_id
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
    endpoint_url=AWS_S3_ENDPOINT_URL,
    region_name=AWS_S3_REGION_NAME,
    config=Config(
        signature_version="s3v4",
        s3={"addressing_style": "path"},  # –ò—Å–ø–æ–ª—å–∑—É–µ–º path-style addressing
        request_checksum_calculation='when_required', 
        response_checksum_validation='when_required',
    )
)

# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
try:
    response = s3.list_buckets()
    print("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∫–µ—Ç—ã:", [bucket["Name"] for bucket in response["Buckets"]])
except Exception as e:
    print("üõë –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3:", e)
    exit(1)

# üîπ –ü–∞–ø–∫–∞ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏–∫–æ–π –∏ –ø—Ä–µ—Ñ–∏–∫—Å –≤ –±–∞–∫–µ—Ç–µ
LOCAL_STATIC_DIR = "static_dev"
S3_STATIC_PREFIX = "static"

print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –∏–∑ '{LOCAL_STATIC_DIR}' –≤ S3 –±–∞–∫–µ—Ç '{AWS_BUCKET_NAME}/{S3_STATIC_PREFIX}'")

# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏–∫–æ–π
if not os.path.exists(LOCAL_STATIC_DIR):
    print(f"üõë –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ '{LOCAL_STATIC_DIR}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    exit(1)

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è MIME-—Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
def get_mime_type(file_path):
    mime_type, _ = mimetypes.guess_type(file_path)
    return mime_type if mime_type else "application/octet-stream"

# üîπ –û–±—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –≤ S3, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ upload_file,
# –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Content-Length.
for root, _, files in os.walk(LOCAL_STATIC_DIR):
    for file_name in files:
        local_path = os.path.join(root, file_name)  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        s3_path = os.path.relpath(local_path, LOCAL_STATIC_DIR)  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        s3_key = f"{S3_STATIC_PREFIX}/{s3_path}"  # –ü—É—Ç—å –≤ –±–∞–∫–µ—Ç–µ

        try:
            s3.upload_file(
                local_path,
                AWS_BUCKET_NAME,
                s3_key,
                ExtraArgs={
                    "ContentType": get_mime_type(local_path),  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME-—Ç–∏–ø–∞
                    "CacheControl": "max-age=86400",
                }
            )
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {s3_key}")
        except Exception as e:
            print(f"üõë –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {s3_key}: {e}")

print("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")